{"version":3,"sources":["serviceWorker.ts","AddItemForm/AddItemForm.tsx","EditableSpan.tsx","Task.tsx","Todolist.tsx","state/todolists-reducer.ts","state/tasks-reducer.ts","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","React","memo","props","console","log","useState","title","setTitle","error","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onTitleChangeHandler","useCallback","newValue","onChangeTaskTitle","taskId","TodolistId","className","isDone","Checkbox","checked","newIsDoneValue","changeTaskStatus","removeTask","Delete","Todolist","addTask","id","onAllClickHandler","filterTasks","onActiveClickHandler","onCompletedClickHandler","onChangeTodolistTitle","tasksForTodolist","tasks","filter","t","removeTodolist","map","style","paddingTop","Button","initialState","AppWithRedux","todolists","useSelector","state","dispatch","useDispatch","addTodolist","action","type","todolistId","v1","addTodolistAC","newTitle","addTaskAC","taskID","removeTaskAC","changeStatus","taskStatus","changeTaskStatusAC","changeFilter","changeTaskTitle","TaskTitle","changeTaskTitleAC","AppBar","position","Toolbar","edge","Menu","Typography","component","Container","fixed","Grid","container","padding","spacing","tl","tasksForToDoList","item","Paper","rootReducer","combineReducers","stateCopy","filteredTasks","newTasks","todolistTasks","todolist","find","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.98f9b943.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {TextField, IconButton} from \"@material-ui/core\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo(function (props: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n\r\n    let [error, setError] = useState<string | null>(\"\")\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title)\r\n            setTitle(\"\")\r\n        } else {\r\n            setError(\"Title is required\")\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem()\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField\r\n            variant={'outlined'}\r\n            value={title}\r\n            onChange={onChangeHandler}\r\n            onKeyPress={onKeyPressHandler}\r\n            error={!!error}\r\n            label={'Title'}\r\n            helperText={error}\r\n        />\r\n        <IconButton color='primary' onClick={addItem}>+</IconButton>\r\n    </div>\r\n})","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n    console.log('EditableSpan called')\r\n\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n    let [title, setTitle] = useState<string>(props.value)\r\n\r\n    const activeEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.value)\r\n    }\r\n\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n\r\n    }\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField\r\n            value={title}\r\n            autoFocus onBlur={activateViewMode}\r\n            onChange={changeTitle}\r\n        />\r\n        : <span onDoubleClick={activeEditMode}>{props.value}</span>\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\ntype TaskPropsType = {\r\n    title: string\r\n    isDone: boolean\r\n    taskId: string\r\n    TodolistId: string\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    onChangeTaskTitle: (id: string, todolistId: string, newValue: string) => void\r\n\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = () => {\r\n        props.removeTask(props.taskId, props.TodolistId)\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked;\r\n        props.changeTaskStatus(props.taskId, newIsDoneValue, props.TodolistId);\r\n    }\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.onChangeTaskTitle(props.taskId, props.TodolistId, newValue)\r\n    },[props.onChangeTaskTitle, props.taskId, props.TodolistId])\r\n    return <div key={props.taskId} className={props.isDone ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.isDone}\r\n            color={'primary'}\r\n            onChange={onChangeHandler}\r\n        />\r\n        <EditableSpan value={props.title}\r\n                      onChange={onTitleChangeHandler}\r\n        />\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n\r\n})","import React, {useCallback} from 'react';\r\nimport {FilterValuesType, TasksType} from './App';\r\nimport {AddItemForm} from \"./AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from \"./Task\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TasksType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    filterTasks: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (newTitle: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    filter: FilterValuesType\r\n    onChangeTaskTitle: (id: string, todolistId: string, newValue: string) => void\r\n    onChangeTodolistTitle: (todolistId: string, newValue: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsType) => {\r\n    console.log(\"Todolist called\")\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolistHandler = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n\r\n    const onAllClickHandler = useCallback(() => {\r\n        props.filterTasks('all', props.id)\r\n    }, [props.filterTasks, props.id])\r\n    const onActiveClickHandler = useCallback(() => {\r\n        props.filterTasks('active', props.id)\r\n    }, [props.filterTasks, props.id])\r\n    const onCompletedClickHandler = useCallback(() => {\r\n        props.filterTasks('completed', props.id)\r\n    }, [props.filterTasks, props.id])\r\n    const onChangeTodolistTitle = useCallback((newValue: string) => {\r\n        props.onChangeTodolistTitle(props.id, newValue)\r\n    }, [props.onChangeTodolistTitle, props.id])\r\n\r\n    let tasksForTodolist = props.tasks\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => !t.isDone)\r\n\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.isDone)\r\n\r\n    }\r\n    return (\r\n        <div className='Block'>\r\n\r\n            <h3>\r\n                <EditableSpan value={props.title} onChange={onChangeTodolistTitle}/>\r\n                <IconButton onClick={removeTodolistHandler}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <div>\r\n                {\r\n                    tasksForTodolist.map(t => {\r\n                            return <>\r\n                                <Task key={t.id}\r\n                                      taskId={t.id}\r\n                                      TodolistId={props.id}\r\n                                      isDone={t.isDone}\r\n                                      title={t.title}\r\n                                      removeTask={props.removeTask}\r\n                                      changeTaskStatus={props.changeTaskStatus}\r\n                                      onChangeTaskTitle={props.onChangeTaskTitle}\r\n                                />\r\n                            </>\r\n                        }\r\n                    )\r\n                }\r\n            </div>\r\n            <div style={{paddingTop: \"10px\"}}>\r\n                <Button variant={props.filter === 'all' ? 'contained' : 'text'} color={'inherit'}\r\n                        onClick={onAllClickHandler}>All\r\n                </Button>\r\n                <Button variant={props.filter === 'active' ? 'contained' : 'text'} color={'primary'}\r\n                        onClick={onActiveClickHandler}>Active\r\n                </Button>\r\n                <Button variant={props.filter === 'completed' ? 'contained' : 'text'} color={'secondary'}\r\n                        onClick={onCompletedClickHandler}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n","import {FilterValuesType, TodolistType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST'\r\n    todolistId: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST'\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE'\r\n    id: string\r\n    title: string\r\n}\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER'\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\nexport type ActionsType =\r\n    RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType\r\n\r\nconst initialState: Array<TodolistType> = []\r\n\r\n\r\nexport const todolistsReducer = (state: Array<TodolistType> = initialState, action: ActionsType): Array<TodolistType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST': {\r\n            const stateCopy = [...state]\r\n            return stateCopy.filter(tl => tl.id !== action.todolistId)\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            const stateCopy = [...state]\r\n            return [...stateCopy, {id: action.todolistId, title: action.title, filter: \"all\"}]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const stateCopy = [...state]\r\n            const todolist = stateCopy.find(tl => tl.id === action.id)\r\n            if (todolist) {\r\n                todolist.title = action.title\r\n            }\r\n            return [...stateCopy]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            const stateCopy = [...state]\r\n            const todolist = stateCopy.find(tl => tl.id === action.id)\r\n            if (todolist) {\r\n                todolist.filter = action.filter\r\n            }\r\n            return [...stateCopy]\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return {type: 'REMOVE-TODOLIST', todolistId}\r\n}\r\nexport const addTodolistAC = (title: string): AddTodolistActionType => {\r\n    return {type: 'ADD-TODOLIST', title, todolistId: v1()}\r\n}\r\nexport const changeTodolistTitleAC = (id: string, title: string): ChangeTodolistTitleActionType => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', id, title}\r\n}\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType): ChangeTodolistFilterActionType => {\r\n    return {type: 'CHANGE-TODOLIST-FILTER', id, filter}\r\n}\r\n\r\n","import {TaskStateType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\nimport {AddTodolistActionType, RemoveTodolistActionType} from \"./todolists-reducer\";\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK'\r\n    todolistId: string\r\n    taskID: string\r\n}\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK'\r\n    todolistId: string\r\n    title: string\r\n}\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS'\r\n    taskID: string\r\n    taskStatus: boolean\r\n    todolistId: string\r\n}\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE'\r\n    taskID: string\r\n    TaskTitle: string\r\n    todolistId: string\r\n}\r\ntype ActionsType =\r\n    RemoveTaskActionType\r\n    | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n\r\nconst initialState: TaskStateType = {}\r\n\r\nexport const tasksReducer = (state: TaskStateType = initialState, action: ActionsType): TaskStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.todolistId]\r\n            const filteredTasks = tasks.filter(t => t.id !== action.taskID)\r\n            stateCopy[action.todolistId] = filteredTasks\r\n            return stateCopy;\r\n        }\r\n        case 'ADD-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.todolistId]\r\n            const newTasks = [{id: v1(), title: action.title, isDone: false}, ...tasks]\r\n            stateCopy[action.todolistId] = newTasks\r\n            return stateCopy\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            const todolistTasks = state[action.todolistId]\r\n            state[action.todolistId] = todolistTasks\r\n                .map(t => t.id === action.taskID\r\n                    ? {...t, isDone: action.taskStatus}\r\n                : t );\r\n            return ({...state})\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            const todolistTasks = state[action.todolistId]\r\n            if(todolistTasks){\r\n                state[action.todolistId]= todolistTasks\r\n                    .map(t => t.id === action.taskID\r\n                        ? {...t, title: action.TaskTitle}\r\n                        : t );\r\n            }\r\n            return {...state}\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            const stateCopy = {...state}\r\n            stateCopy[action.todolistId] = []\r\n            return stateCopy\r\n        }\r\n        case \"REMOVE-TODOLIST\": {\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.todolistId]\r\n            return stateCopy\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const removeTaskAC = (taskID: string, todolistId: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', todolistId, taskID}\r\n}\r\nexport const addTaskAC = (title: string, todolistId: string): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', todolistId, title}\r\n}\r\nexport const changeTaskStatusAC = (taskID: string, taskStatus: boolean, todolistId: string): ChangeTaskStatusActionType => {\r\n    return {type: 'CHANGE-TASK-STATUS', taskID, taskStatus, todolistId}\r\n}\r\nexport const changeTaskTitleAC = (taskID: string, todolistId: string, TaskTitle: string): ChangeTaskTitleActionType => {\r\n    return {type: 'CHANGE-TASK-TITLE', taskID, TaskTitle, todolistId}\r\n}","import React, {useCallback} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from './Todolist';\r\nimport {AddItemForm} from \"./AddItemForm/AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {\r\n    addTodolistAC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleAC,\r\n    removeTodolistAC,\r\n} from \"./state/todolists-reducer\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./state/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from './state/store';\r\n\r\n\r\nexport type FilterValuesType = 'all' | 'completed' | 'active'\r\nexport type TasksType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\nexport type TaskStateType = { [key: string]: Array<TasksType> }\r\n\r\nexport default AppWithRedux;\r\n\r\nfunction AppWithRedux() {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TaskStateType>(state => state.tasks)\r\n    const dispatch = useDispatch();\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const action = addTodolistAC(title)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const addTask = useCallback((newTitle: string, todolistId: string) => {\r\n        const action = addTaskAC(newTitle, todolistId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const removeTask = useCallback((id: string, todolistId: string) => {\r\n        const action = removeTaskAC(id, todolistId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const removeTodolist = useCallback((id: string) => {\r\n        const action = removeTodolistAC(id)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const changeStatus = useCallback((id: string, isDone: boolean, todolistId: string) => {\r\n        const action = changeTaskStatusAC(id, isDone, todolistId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const changeTaskTitle = useCallback((id: string, todolistId: string, newValue: string) => {\r\n        const action = changeTaskTitleAC(id, todolistId, newValue)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const onChangeTodolistTitle = useCallback((todolistId: string, newValue: string) => {\r\n        const action = changeTodolistTitleAC(todolistId, newValue)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n\r\n    return <div className=\"App\">\r\n        <AppBar position=\"static\">\r\n            <Toolbar variant=\"dense\">\r\n                <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                    <Menu/>\r\n                </IconButton>\r\n                <Typography variant=\"h6\" color=\"inherit\" component=\"div\">\r\n                    News\r\n                </Typography>\r\n                <Button color='inherit'>Login</Button>\r\n            </Toolbar>\r\n        </AppBar>\r\n        <Container fixed>\r\n            <Grid container style={{padding: '20px'}}>\r\n                <AddItemForm addItem={addTodolist}/>\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                {\r\n\r\n                    todolists.map(tl => {\r\n                        let tasksForToDoList = tasks[tl.id]\r\n\r\n                        return <Grid item key={tl.id}>\r\n                            <Paper style={{padding: '10px'}}>\r\n                                <Todolist\r\n                                    key={tl.id}\r\n                                    id={tl.id}\r\n                                    title={tl.title}\r\n                                    tasks={tasksForToDoList}\r\n                                    removeTask={removeTask}\r\n                                    removeTodolist={removeTodolist}\r\n                                    filterTasks={changeFilter}\r\n                                    addTask={addTask}\r\n                                    changeTaskStatus={changeStatus}\r\n                                    filter={tl.filter}\r\n                                    onChangeTaskTitle={changeTaskTitle}\r\n                                    onChangeTodolistTitle={onChangeTodolistTitle}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    })\r\n                }\r\n            </Grid>\r\n        </Container>\r\n    </div>\r\n}\r\n","\r\nimport {tasksReducer} from './tasks-reducer';\r\nimport {todolistsReducer} from './todolists-reducer';\r\nimport {combineReducers, createStore} from 'redux';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer);\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n //@ts-ignore\r\nwindow.store = store;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithReducers from \"./AppWithReducers\";\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}> <AppWithRedux /></Provider>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}