{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","AddItemForm/AddItemForm.tsx","EditableSpan.tsx","Task.tsx","state/tasks-reducer.ts","Todolist.tsx","state/todolists-reducer.ts","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TodoTaskPriorities","AddItemForm","React","memo","props","console","log","useState","title","setTitle","error","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","post","todolistId","delete","put","taskId","model","Task","onTitleChangeHandler","useCallback","newValue","onChangeTaskTitle","TodolistId","className","status","Completed","Checkbox","checked","newIsDoneValue","New","changeTaskStatus","removeTask","Delete","initialState","Todolist","dispatch","useDispatch","useEffect","id","then","res","tasks","type","setTasksAC","data","items","addTask","onAllClickHandler","filterTasks","onActiveClickHandler","onCompletedClickHandler","onChangeTodolistTitle","tasksForTodolist","filter","t","removeTodolist","map","style","paddingTop","Button","AppWithRedux","todolists","useSelector","state","addTodolist","todolist","item","addTodolistTC","newTitle","task","addTaskTC","taskID","removeTaskAC","removeTaskTC","removeTodolistAC","changeStatus","getState","find","tl","description","priority","startDate","deadline","taskStatus","changeTaskStatusAC","changeTaskStatusTC","changeFilter","action","changeTaskTitle","TaskTitle","changeTaskTitleAC","changeTaskTitleTC","todoListId","changeTodolistTitleAC","AppBar","position","Toolbar","edge","Menu","Typography","component","Container","fixed","Grid","container","padding","spacing","tasksForToDoList","Paper","rootReducer","combineReducers","stateCopy","forEach","todolistTasks","newTodolist","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.e25281b5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New,\r\n    InProgress,\r\n    Completed,\r\n    Draft\r\n}\r\n\r\nexport enum TodoTaskPriorities {\r\n    Low,\r\n    Middle,\r\n    Hi,\r\n    Urgently,\r\n    Later\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TodoTaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\ntype ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: [string]\r\n    data: D\r\n}\r\ntype GetTasksResponseType = {\r\n    error: null | string\r\n    items: TaskType[]\r\n    totalCount: number\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string | null\r\n    status: TaskStatuses\r\n    priority: TodoTaskPriorities\r\n    startDate: string | null\r\n    deadline: string | null\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"4bd60911-e7ab-47b0-851f-962a07b6cbc2\"\r\n    }\r\n})\r\n\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists')\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title})\r\n\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${todolistId}`, {title: title})\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponseType>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title: title})\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    }\r\n\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {TextField, IconButton} from \"@material-ui/core\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo(function (props: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n\r\n    let [error, setError] = useState<string | null>(\"\")\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title)\r\n            setTitle(\"\")\r\n        } else {\r\n            setError(\"Title is required\")\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem()\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField\r\n            variant={'outlined'}\r\n            value={title}\r\n            onChange={onChangeHandler}\r\n            onKeyPress={onKeyPressHandler}\r\n            error={!!error}\r\n            label={'Title'}\r\n            helperText={error}\r\n        />\r\n        <IconButton color='primary' onClick={addItem}>+</IconButton>\r\n    </div>\r\n})","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n    console.log('EditableSpan called')\r\n\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n    let [title, setTitle] = useState<string>(props.value)\r\n\r\n    const activeEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.value)\r\n    }\r\n\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n\r\n    }\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField\r\n            value={title}\r\n            autoFocus onBlur={activateViewMode}\r\n            onChange={changeTitle}\r\n        />\r\n        : <span onDoubleClick={activeEditMode}>{props.value}</span>\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses} from \"./api/todolists-api\";\r\n\r\ntype TaskPropsType = {\r\n    title: string\r\n    status: TaskStatuses\r\n    taskId: string\r\n    TodolistId: string\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    onChangeTaskTitle: (id: string, todolistId: string, newValue: string) => void\r\n\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = () => {\r\n        props.removeTask(props.taskId, props.TodolistId)\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New;\r\n        props.changeTaskStatus(props.taskId, newIsDoneValue, props.TodolistId);\r\n    }\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.onChangeTaskTitle(props.taskId, props.TodolistId, newValue)\r\n    },[props.onChangeTaskTitle, props.taskId, props.TodolistId])\r\n    return <div key={props.taskId} className={props.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.status === TaskStatuses.Completed}\r\n            color={'primary'}\r\n            onChange={onChangeHandler}\r\n        />\r\n        <EditableSpan value={props.title}\r\n                      onChange={onTitleChangeHandler}\r\n        />\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n\r\n})","import {TaskStateType} from \"../App\";\r\nimport {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from \"./todolists-reducer\";\r\nimport {TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from \"../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\n\r\nexport type RemoveTaskActionType = ReturnType<typeof removeTaskAC>\r\nexport type AddTaskActionType = ReturnType<typeof addTaskAC>\r\nexport type ChangeTaskStatusActionType = ReturnType<typeof changeTaskStatusAC>\r\nexport type ChangeTaskTitleActionType = ReturnType<typeof changeTaskTitleAC>\r\nexport type SetTasksActionType = ReturnType<typeof setTasksAC>\r\ntype ActionsType =\r\n    RemoveTaskActionType\r\n    | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | SetTasksActionType\r\nconst initialState: TaskStateType = {}\r\n\r\nexport const tasksReducer = (state: TaskStateType = initialState, action: ActionsType): TaskStateType => {\r\n    switch (action.type) {\r\n        case \"SET-TASKS\": {\r\n            const stateCopy = {...state}\r\n            stateCopy[action.todolistId] = action.tasks\r\n            return stateCopy\r\n        }\r\n        case 'SET-TODOLISTS': {\r\n            const stateCopy = {...state}\r\n            action.todolists.forEach((tl) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy\r\n        }\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.todolistId]\r\n            stateCopy[action.todolistId] = tasks.filter(t => t.id !== action.taskID)\r\n            return stateCopy;\r\n        }\r\n        case 'ADD-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.task.todoListId]\r\n            stateCopy[action.task.todoListId] = [action.task, ...tasks]\r\n            return stateCopy\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            const todolistTasks = state[action.todolistId]\r\n            state[action.todolistId] = todolistTasks\r\n                .map(t => t.id === action.taskID\r\n                    ? {...t, status: action.taskStatus}\r\n                    : t);\r\n            return ({...state})\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            const todolistTasks = state[action.todolistId]\r\n            if (todolistTasks) {\r\n                state[action.todolistId] = todolistTasks\r\n                    .map(t => t.id === action.taskID\r\n                        ? {...t, title: action.TaskTitle}\r\n                        : t);\r\n            }\r\n            return {...state}\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.todolist.id]: []\r\n            }\r\n\r\n\r\n        }\r\n        case \"REMOVE-TODOLIST\": {\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.todolistId]\r\n            return stateCopy\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const removeTaskAC = (taskID: string, todolistId: string) => {\r\n    return {type: 'REMOVE-TASK', todolistId, taskID} as const\r\n}\r\nexport const addTaskAC = (task: TaskType) => {\r\n    return {type: 'ADD-TASK', task} as const\r\n}\r\nexport const changeTaskStatusAC = (taskID: string, taskStatus: TaskStatuses, todolistId: string) => {\r\n    return {type: 'CHANGE-TASK-STATUS', taskID, taskStatus, todolistId} as const\r\n}\r\nexport const changeTaskTitleAC = (taskID: string, todolistId: string, TaskTitle: string) => {\r\n    return {type: 'CHANGE-TASK-TITLE', taskID, TaskTitle, todolistId} as const\r\n}\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => {\r\n    return {type: 'SET-TASKS', tasks, todolistId} as const\r\n}\r\n\r\n\r\nexport const fetchTaskTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            dispatch(setTasksAC(res.data.items, todolistId))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(() => {\r\n            dispatch(removeTaskAC(taskId, todolistId))\r\n        })\r\n}\r\nexport const addTaskTC = (todolistId: string, title: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            dispatch(addTaskAC(res.data.data.item))\r\n        })\r\n\r\n}\r\n\r\nexport const changeTaskStatusTC = (taskId: string, todolistId: string, status: TaskStatuses) => (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n    const allTasksFormState = getState().tasks\r\n    const tasksForCurrentTodolist = allTasksFormState[todolistId]\r\n    const task = tasksForCurrentTodolist.find(tl => {\r\n        return tl.id === taskId\r\n    })\r\n    if (task) {\r\n        const model: UpdateTaskModelType = {\r\n            title: task.title,\r\n            description: task.description,\r\n            status: status,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            deadline: task.deadline,\r\n        }\r\n        todolistsAPI.updateTask(todolistId, taskId, model).then(() => {\r\n            dispatch(changeTaskStatusAC(taskId, status, todolistId))\r\n\r\n        })\r\n    }\r\n}\r\n\r\nexport const changeTaskTitleTC = (taskId: string, todolistId: string, title: string) => (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n    const tasks = getState().tasks\r\n    const tasksForCurrentTodolist = tasks[todolistId]\r\n    const task = tasksForCurrentTodolist.find(tl => {\r\n        return tl.id === taskId\r\n    })\r\n    if (task) {\r\n        const model: UpdateTaskModelType = {\r\n            title: title,\r\n            status: task.status,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            deadline: task.deadline\r\n        }\r\n        todolistsAPI.updateTask(todolistId, taskId, model)\r\n            .then(() => {\r\n                dispatch(changeTaskTitleAC(taskId, todolistId, title))\r\n            })\r\n    }\r\n}","import React, {useCallback, useEffect} from 'react';\r\nimport {AddItemForm} from \"./AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from \"./Task\";\r\nimport {FilterValuesType} from \"./state/todolists-reducer\";\r\nimport {TaskStatuses} from \"./api/todolists-api\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchTaskTC} from \"./state/tasks-reducer\";\r\nimport {TaskType} from \"./api/todolists-api\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    filterTasks: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (newTitle: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    filter: FilterValuesType\r\n    onChangeTaskTitle: (id: string, todolistId: string, newValue: string) => void\r\n    onChangeTodolistTitle: (todolistId: string, newValue: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsType) => {\r\n    console.log(\"Todolist called\")\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(fetchTaskTC(props.id))\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolistHandler = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n\r\n    const onAllClickHandler = useCallback(() => {\r\n        props.filterTasks('all', props.id)\r\n    }, [props.filterTasks, props.id])\r\n    const onActiveClickHandler = useCallback(() => {\r\n        props.filterTasks('active', props.id)\r\n    }, [props.filterTasks, props.id])\r\n    const onCompletedClickHandler = useCallback(() => {\r\n        props.filterTasks('completed', props.id)\r\n    }, [props.filterTasks, props.id])\r\n    const onChangeTodolistTitle = useCallback((newValue: string) => {\r\n        props.onChangeTodolistTitle(props.id, newValue)\r\n    }, [props.onChangeTodolistTitle, props.id])\r\n\r\n    let tasksForTodolist = props.tasks\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n\r\n    }\r\n    return (\r\n        <div className='Block'>\r\n\r\n            <h3>\r\n                <EditableSpan value={props.title} onChange={onChangeTodolistTitle}/>\r\n                <IconButton onClick={removeTodolistHandler}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <div>\r\n                {\r\n                    tasksForTodolist.map(t => {\r\n                            return <>\r\n                                <Task key={t.id}\r\n                                      taskId={t.id}\r\n                                      TodolistId={props.id}\r\n                                      status={t.status}\r\n                                      title={t.title}\r\n                                      removeTask={props.removeTask}\r\n                                      changeTaskStatus={props.changeTaskStatus}\r\n                                      onChangeTaskTitle={props.onChangeTaskTitle}\r\n                                />\r\n                            </>\r\n                        }\r\n                    )\r\n                }\r\n            </div>\r\n            <div style={{paddingTop: \"10px\"}}>\r\n                <Button variant={props.filter === 'all' ? 'contained' : 'text'} color={'inherit'}\r\n                        onClick={onAllClickHandler}>All\r\n                </Button>\r\n                <Button variant={props.filter === 'active' ? 'contained' : 'text'} color={'primary'}\r\n                        onClick={onActiveClickHandler}>Active\r\n                </Button>\r\n                <Button variant={props.filter === 'completed' ? 'contained' : 'text'} color={'secondary'}\r\n                        onClick={onCompletedClickHandler}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n","import {todolistsAPI, TodolistType} from \"../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n}\r\nexport type FilterValuesType = 'all' | 'completed' | 'active'\r\n\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>\r\nexport type ChangeTodolistTitleActionType = ReturnType<typeof changeTodolistTitleAC>\r\nexport type ChangeTodolistFilterActionType = ReturnType<typeof changeTodolistFilterAC>\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>\r\nexport type ActionsType =\r\n    RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType\r\n    | SetTodolistsActionType\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case \"SET-TODOLISTS\": {\r\n            return action.todolists.map(tl => ({\r\n                ...tl,\r\n                filter: 'all'\r\n            }))\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const stateCopy = [...state]\r\n            return stateCopy.filter(tl => tl.id !== action.todolistId)\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            const newTodolist: TodolistDomainType = {...action.todolist, filter: \"all\"}\r\n            return [newTodolist, ...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const stateCopy = [...state]\r\n            const todolist = stateCopy.find(tl => tl.id === action.id)\r\n            if (todolist) {\r\n                todolist.title = action.title\r\n            }\r\n            return [...stateCopy]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            const stateCopy = [...state]\r\n            const todolist = stateCopy.find(tl => tl.id === action.id)\r\n            if (todolist) {\r\n                todolist.filter = action.filter\r\n            }\r\n            return [...stateCopy]\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistId: string) => {\r\n    return {type: 'REMOVE-TODOLIST', todolistId} as const\r\n}\r\nexport const addTodolistAC = (todolist: TodolistType) => {\r\n    return {type: 'ADD-TODOLIST', todolist} as const\r\n}\r\nexport const changeTodolistTitleAC = (id: string, title: string) => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', id, title} as const\r\n}\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => {\r\n    return {type: 'CHANGE-TODOLIST-FILTER', id, filter} as const\r\n}\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => {\r\n    return {type: 'SET-TODOLISTS', todolists} as const\r\n}\r\n\r\n\r\n//thunk\r\n\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.deleteTodolist(todolistId)\r\n        .then(() => {\r\n            dispatch(removeTodolistAC(todolistId))\r\n        })\r\n}\r\nexport const addTodolistTC = (title: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.createTodolist(title)\r\n        .then((res) => {\r\n            dispatch(addTodolistAC(res.data.data.item))\r\n        })\r\n}\r\nexport const updateTodolistTitleTC = (todoListId: string, title: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.updateTodolist(todoListId, title)\r\n        .then(() => {\r\n            dispatch(changeTodolistTitleAC(todoListId, title))\r\n        })\r\n}\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from './Todolist';\r\nimport {AddItemForm} from \"./AddItemForm/AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType, updateTodolistTitleTC,\r\n} from \"./state/todolists-reducer\";\r\nimport {\r\n    addTaskTC,\r\n    changeTaskStatusTC,\r\n    changeTaskTitleTC,\r\n    removeTaskTC\r\n} from \"./state/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from './state/store';\r\nimport {TaskStatuses, TaskType} from './api/todolists-api';\r\n\r\n\r\nexport type TaskStateType = { [key: string]: Array<TaskType> }\r\n\r\nexport default AppWithRedux;\r\n\r\nfunction AppWithRedux() {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TaskStateType>(state => state.tasks)\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        dispatch(fetchTodolistsTC())\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title))\r\n    }, [dispatch])\r\n    const addTask = useCallback((newTitle: string, todolistId: string) => {\r\n        dispatch(addTaskTC(todolistId, newTitle))\r\n    }, [dispatch])\r\n    const removeTask = useCallback((id: string, todolistId: string) => {\r\n        dispatch(removeTaskTC(id, todolistId))\r\n    }, [dispatch])\r\n    const removeTodolist = useCallback((id: string) => {\r\n        dispatch(removeTodolistTC(id))\r\n    }, [dispatch])\r\n    const changeStatus = useCallback((id: string, status: TaskStatuses, todolistId: string) => {\r\n        dispatch(changeTaskStatusTC(id, todolistId, status))\r\n    }, [dispatch])\r\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const changeTaskTitle = useCallback((id: string, todolistId: string, newValue: string) => {\r\n        dispatch(changeTaskTitleTC(id, todolistId, newValue))\r\n    }, [dispatch])\r\n    const onChangeTodolistTitle = useCallback((todolistId: string, newValue: string) => {\r\n        dispatch(updateTodolistTitleTC(todolistId, newValue))\r\n    }, [dispatch])\r\n\r\n\r\n    return <div className=\"App\">\r\n        <AppBar position=\"static\">\r\n            <Toolbar variant=\"dense\">\r\n                <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                    <Menu/>\r\n                </IconButton>\r\n                <Typography variant=\"h6\" color=\"inherit\" component=\"div\">\r\n                    News\r\n                </Typography>\r\n                <Button color='inherit'>Login</Button>\r\n            </Toolbar>\r\n        </AppBar>\r\n        <Container fixed>\r\n            <Grid container style={{padding: '20px'}}>\r\n                <AddItemForm addItem={addTodolist}/>\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                {\r\n\r\n                    todolists.map(tl => {\r\n                        let tasksForToDoList = tasks[tl.id]\r\n\r\n                        return <Grid item key={tl.id}>\r\n                            <Paper style={{padding: '10px'}}>\r\n                                <Todolist\r\n                                    key={tl.id}\r\n                                    id={tl.id}\r\n                                    title={tl.title}\r\n                                    tasks={tasksForToDoList}\r\n                                    removeTask={removeTask}\r\n                                    removeTodolist={removeTodolist}\r\n                                    filterTasks={changeFilter}\r\n                                    addTask={addTask}\r\n                                    changeTaskStatus={changeStatus}\r\n                                    filter={tl.filter}\r\n                                    onChangeTaskTitle={changeTaskTitle}\r\n                                    onChangeTodolistTitle={onChangeTodolistTitle}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    })\r\n                }\r\n            </Grid>\r\n        </Container>\r\n    </div>\r\n}\r\n","import {tasksReducer} from './tasks-reducer';\r\nimport {todolistsReducer} from './todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from 'redux-thunk'\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n //@ts-ignore\r\nwindow.store = store;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}> <AppWithRedux/></Provider>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}