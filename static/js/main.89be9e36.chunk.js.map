{"version":3,"sources":["AddItemForm/AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Todolist","className","newValue","onChangeTodolistTitle","id","removeTodolist","Delete","addTask","tasks","map","t","key","isDone","Checkbox","checked","newIsDoneValue","changeTaskStatus","removeTask","Button","filter","filterTasks","App","newTitle","todolistId","task","v1","todolistTask","setTasks","setTodolists","todolists","changeStatus","find","changeFilter","todolist","todolistId1","todolistId2","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","component","Container","fixed","Grid","container","style","padding","newTodolistId","spacing","tl","allTodolistTasks","tasksForToDoList","item","Paper","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"sUAOO,SAASA,EAAYC,GACxB,MAAwBC,mBAAS,IAAjC,mBAAKC,EAAL,KAAYC,EAAZ,KACA,EAAwBF,mBAAwB,IAAhD,mBAAKG,EAAL,KAAYC,EAAZ,KAEMC,EAAU,WACS,KAAjBJ,EAAMK,QACNP,EAAMM,QAAQJ,GACdC,EAAS,KAETE,EAAS,sBAejB,OAAO,6BACH,kBAACG,EAAA,EAAD,CACIC,QAAS,WACTC,MAAOR,EACPS,SAfgB,SAACC,GACrBT,EAASS,EAAEC,cAAcH,QAerBI,WAZkB,SAACF,GACvBP,EAAS,MACU,KAAfO,EAAEG,UACFT,KAUAF,QAASA,EACTY,MAAO,QACPC,WAAYb,IAEhB,kBAACc,EAAA,EAAD,CAAYC,MAAM,UAAUC,QAASd,GAArC,MCjCD,SAASe,EAAarB,GACzB,MAA8BC,oBAAkB,GAAhD,mBAAKqB,EAAL,KAAeC,EAAf,KACA,EAAwBtB,mBAAiBD,EAAMU,OAA/C,mBAAKR,EAAL,KAAYC,EAAZ,KAaA,OAAQmB,EACF,kBAACd,EAAA,EAAD,CACEC,QAAS,WACTC,MAAOR,EACPsB,WAAS,EAACC,OAZO,WACrBF,GAAY,GACZvB,EAAMW,SAAST,IAWXS,SARY,SAACC,GACjBT,EAASS,EAAEC,cAAcH,UASvB,0BAAMgB,cAnBW,WACnBH,GAAY,GACZpB,EAASH,EAAMU,SAiByBV,EAAMU,O,+BCT/C,SAASiB,EAAS3B,GAwBrB,OACI,yBAAK4B,UAAU,SAEX,4BACI,kBAACP,EAAD,CAAcX,MAAOV,EAAME,MAAOS,SAVhB,SAACkB,GAC3B7B,EAAM8B,sBAAsB9B,EAAM+B,GAAIF,MAU9B,kBAACX,EAAA,EAAD,CAAYE,QAxBM,WAC1BpB,EAAMgC,eAAehC,EAAM+B,MAwBf,kBAACE,EAAA,EAAD,QAGR,kBAAClC,EAAD,CAAaO,QA/BL,SAACJ,GACbF,EAAMkC,QAAQhC,EAAOF,EAAM+B,OA+BvB,6BAEQ/B,EAAMmC,MAAMC,KAAI,SAAAC,GAWR,OAAO,yBAAKC,IAAKD,EAAEN,GAAIH,UAAWS,EAAEE,OAAS,UAAY,IAErD,kBAACC,EAAA,EAAD,CACIC,QAASJ,EAAEE,OACXpB,MAAO,UACPR,SAZgB,SAACC,GACrB,IAAI8B,EAAiB9B,EAAEC,cAAc4B,QACrCzC,EAAM2C,iBAAiBN,EAAEN,GAAIW,EAAgB1C,EAAM+B,OAYnD,kBAACV,EAAD,CAAcX,MAAO2B,EAAEnC,MACTS,SAXD,SAACkB,GACd7B,EAAMW,SAAS0B,EAAEN,GAAI/B,EAAM+B,GAAIF,MAY/B,kBAACX,EAAA,EAAD,CAAYE,QApBO,WACnBpB,EAAM4C,WAAWP,EAAEN,GAAI/B,EAAM+B,MAoBzB,kBAACE,EAAA,EAAD,YAOxB,6BACI,kBAACY,EAAA,EAAD,CAAQpC,QAA0B,QAAjBT,EAAM8C,OAAmB,YAAc,OAAQ3B,MAAO,UAC/DC,QA1DM,WACtBpB,EAAM+C,YAAY,MAAO/C,EAAM+B,MAwDvB,OAGA,kBAACc,EAAA,EAAD,CAAQpC,QAA0B,WAAjBT,EAAM8C,OAAsB,YAAc,OAAQ3B,MAAO,UAClEC,QA1DS,WACzBpB,EAAM+C,YAAY,SAAU/C,EAAM+B,MAwD1B,UAGA,kBAACc,EAAA,EAAD,CAAQpC,QAA0B,cAAjBT,EAAM8C,OAAyB,YAAc,OAAQ3B,MAAO,YACrEC,QA1DY,WAC5BpB,EAAM+C,YAAY,YAAa/C,EAAM+B,MAwD7B,e,4ECsFDiB,MA5Jf,WAAgB,IAAD,EAaX,SAASd,EAAQe,EAAkBC,GAC/B,IAAIC,EAAO,CAACpB,GAAIqB,cAAMlD,MAAO+C,EAAUV,QAAQ,GAC3Cc,EAAelB,EAAMe,GACzBf,EAAMe,GAAN,CAAqBC,GAArB,mBAA8BE,IAC9BC,EAAS,eAAInB,IAGjB,SAASS,EAAWb,EAAYmB,GAC5B,IAAIG,EAAelB,EAAMe,GACzBf,EAAMe,GAAcG,EAAaP,QAAO,SAAAT,GAAC,OAAIA,EAAEN,KAAOA,KACtDuB,EAAS,eAAInB,IAGjB,SAASH,EAAeD,GACpBwB,EAAaC,EAAUV,QAAO,SAAAT,GAAC,OAAIA,EAAEN,KAAOA,aACrCI,EAAMJ,GACbuB,EAAS,eAAInB,IAGjB,SAASsB,EAAa1B,EAAYQ,EAAiBW,GAC/C,IACIC,EADehB,EAAMe,GACDQ,MAAK,SAAArB,GAAC,OAAIA,EAAEN,KAAOA,KACvCoB,IACAA,EAAKZ,OAASA,EACde,EAAS,eAAInB,KAMrB,SAASwB,EAAajD,EAAmBwC,GACrC,IAAIU,EAAWJ,EAAUE,MAAK,SAAArB,GAAC,OAAIA,EAAEN,KAAOmB,KACxCU,IACAA,EAASd,OAASpC,EAClB6C,EAAa,YAAIC,KAIzB,SAAS7C,EAASoB,EAAYmB,EAAoBrB,GAC9C,IACIsB,EADehB,EAAMe,GACDQ,MAAK,SAAArB,GAAC,OAAIA,EAAEN,KAAOA,KACvCoB,IACAA,EAAKjD,MAAQ2B,EACbyB,EAAS,eAAInB,KAKrB,SAASL,EAAsBoB,EAAoBrB,GAC/C,IAAI+B,EAAWJ,EAAUE,MAAK,SAAArB,GAAC,OAAIA,EAAEN,KAAOmB,KACxCU,IACAA,EAAS1D,MAAQ2B,EACjB0B,EAAa,YAAIC,KAKzB,IAAIK,EAAcT,cACdU,EAAcV,cAClB,EAAgCnD,mBAA8B,CAC1D,CACI8B,GAAI8B,EACJ3D,MAAO,gBACP4C,OAAQ,OAEZ,CACIf,GAAI+B,EACJ5D,MAAO,cACP4C,OAAQ,SAThB,mBAAKU,EAAL,KAAgBD,EAAhB,KAYA,EAAwBtD,oBAAQ,mBAC3B4D,EAAc,CACX,CAAC9B,GAAIqB,cAAMlD,MAAO,WAAYqC,QAAQ,GACtC,CAACR,GAAIqB,cAAMlD,MAAO,KAAMqC,QAAQ,GAChC,CAACR,GAAIqB,cAAMlD,MAAO,UAAWqC,QAAQ,GACrC,CAACR,GAAIqB,cAAMlD,MAAO,WAAYqC,QAAQ,GACtC,CAACR,GAAIqB,cAAMlD,MAAO,WAAYqC,QAAQ,KANd,cAQ3BuB,EAAc,CACX,CAAC/B,GAAIqB,cAAMlD,MAAO,OAAQqC,QAAQ,GAClC,CAACR,GAAIqB,cAAMlD,MAAO,aAAcqC,QAAQ,KAVhB,IAAhC,mBAAKJ,EAAL,KAAYmB,EAAZ,KAcA,OACI,yBAAK1B,UAAU,OACX,kBAACmC,EAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,EAAA,EAAD,CAASxD,QAAQ,SACb,kBAACS,EAAA,EAAD,CAAYgD,KAAK,QAAQ/C,MAAM,UAAUgD,aAAW,QAChD,kBAACC,EAAA,EAAD,OAEJ,kBAACC,EAAA,EAAD,CAAY5D,QAAQ,KAAKU,MAAM,UAAUmD,UAAU,OAAnD,QAGA,kBAACzB,EAAA,EAAD,CAAQ1B,MAAM,WAAd,WAGR,kBAACoD,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,MAAO,CAACC,QAAS,SAC7B,kBAAC7E,EAAD,CAAaO,QA/G7B,SAAqBJ,GACjB,IAAI2E,EAAgBzB,cAMpBG,EAAa,CALmB,CAC5BxB,GAAI8C,EACJ3E,MAAOA,EACP4C,OAAQ,QAEA,mBAAkBU,KAC9BF,EAAS,2BAAInB,GAAL,kBAAa0C,EAAgB,UAyG7B,kBAACJ,EAAA,EAAD,CAAMC,WAAS,EAACI,QAAS,GAGjBtB,EAAUpB,KAAI,SAAA2C,GACV,IAAIC,EAAmB7C,EAAM4C,EAAGhD,IAC5BkD,EAAmBD,EAUvB,MATkB,WAAdD,EAAGjC,SACHmC,EAAmBD,EAAiBlC,QAAO,SAAAT,GAAC,OAAKA,EAAEE,WAGrC,cAAdwC,EAAGjC,SACHmC,EAAmBD,EAAiBlC,QAAO,SAAAT,GAAC,OAAIA,EAAEE,WAI/C,kBAACkC,EAAA,EAAD,CAAMS,MAAI,GACb,kBAACC,EAAA,EAAD,CAAOR,MAAO,CAACC,QAAS,SACpB,kBAACjD,EAAD,CACIW,IAAKyC,EAAGhD,GACRA,GAAIgD,EAAGhD,GACP7B,MAAO6E,EAAG7E,MACViC,MAAO8C,EACPrC,WAAYA,EACZZ,eAAgBA,EAChBe,YAAaY,EACbzB,QAASA,EACTS,iBAAkBc,EAClBX,OAAQiC,EAAGjC,OACXnC,SAAUA,EACVmB,sBAAuBA,aC3J3CsD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SDqI5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA/F,GACLgG,QAAQhG,MAAMA,EAAMiG,c","file":"static/js/main.89be9e36.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Button, TextField, IconButton} from \"@material-ui/core\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormPropsType) {\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(\"\")\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title)\r\n            setTitle(\"\")\r\n        } else {\r\n            setError(\"Title is required\")\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.charCode === 13) {\r\n            addItem()\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField\r\n            variant={'outlined'}\r\n            value={title}\r\n            onChange={onChangeHandler}\r\n            onKeyPress={onKeyPressHandler}\r\n            error={!!error}\r\n            label={'Title'}\r\n            helperText={error}\r\n        />\r\n        <IconButton color='primary' onClick={addItem}>+</IconButton>\r\n    </div>\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n    let [title, setTitle] = useState<string>(props.value)\r\n    const activeEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.value)\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    return (editMode\r\n        ? <TextField\r\n            variant={'outlined'}\r\n            value={title}\r\n            autoFocus onBlur={activateViewMode}\r\n            onChange={changeTitle}\r\n        />\r\n        : <span onDoubleClick={activeEditMode}>{props.value}</span>)\r\n}","import React, {ChangeEvent} from 'react';\r\nimport {TasksType, FilterType} from './App';\r\nimport {AddItemForm} from \"./AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {IconButton, Button, Checkbox} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons'\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TasksType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    filterTasks: (value: FilterType, todolistId: string) => void\r\n    addTask: (newTitle: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    filter: FilterType\r\n    onChange: (id: string, todolistId: string, newValue: string) => void\r\n    onChangeTodolistTitle: (todolistId: string, newValue: string) => void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id)\r\n    }\r\n    const removeTodolistHandler = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n\r\n    const onAllClickHandler = () => {\r\n        props.filterTasks('all', props.id)\r\n    }\r\n    const onActiveClickHandler = () => {\r\n        props.filterTasks('active', props.id)\r\n    }\r\n    const onCompletedClickHandler = () => {\r\n        props.filterTasks('completed', props.id)\r\n    }\r\n    const onChangeTodolistTitle = (newValue: string) => {\r\n        props.onChangeTodolistTitle(props.id, newValue)\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div className='Block'>\r\n\r\n            <h3>\r\n                <EditableSpan value={props.title} onChange={onChangeTodolistTitle}/>\r\n                <IconButton onClick={removeTodolistHandler}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <div>\r\n                {\r\n                    props.tasks.map(t => {\r\n                            const onClickHandler = () => {\r\n                                props.removeTask(t.id, props.id)\r\n                            }\r\n                            const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                                let newIsDoneValue = e.currentTarget.checked;\r\n                                props.changeTaskStatus(t.id, newIsDoneValue, props.id);\r\n                            }\r\n                            const onChange = (newValue: string) => {\r\n                                props.onChange(t.id, props.id, newValue)\r\n                            }\r\n                            return <div key={t.id} className={t.isDone ? 'is-done' : ''}>\r\n                                {/*<input type=\"checkbox\" onChange={onChangeHandler} checked={t.isDone}/>*/}\r\n                                <Checkbox\r\n                                    checked={t.isDone}\r\n                                    color={'primary'}\r\n                                    onChange={onChangeHandler}\r\n                                />\r\n                                <EditableSpan value={t.title}\r\n                                              onChange={onChange}\r\n                                />\r\n                                <IconButton onClick={onClickHandler}>\r\n                                    <Delete/>\r\n                                </IconButton>\r\n                            </div>\r\n                        }\r\n                    )\r\n                }\r\n            </div>\r\n            <div>\r\n                <Button variant={props.filter === 'all' ? 'contained' : 'text'} color={'inherit'}\r\n                        onClick={onAllClickHandler}>All\r\n                </Button>\r\n                <Button variant={props.filter === 'active' ? 'contained' : 'text'} color={'primary'}\r\n                        onClick={onActiveClickHandler}>Active\r\n                </Button>\r\n                <Button variant={props.filter === 'completed' ? 'contained' : 'text'} color={'secondary'}\r\n                        onClick={onCompletedClickHandler}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from \"./AddItemForm/AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\n\r\n\r\nexport type FilterType = 'all' | 'completed' | 'active'\r\n\r\nexport type TasksType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterType\r\n}\r\ntype TaskStateType = { [key: string]: Array<TasksType> }\r\n\r\nfunction App() {\r\n\r\n    function addTodolist(title: string) {\r\n        let newTodolistId = v1()\r\n        let newTodolist: TodolistType = {\r\n            id: newTodolistId,\r\n            title: title,\r\n            filter: 'all'\r\n        }\r\n        setTodolists([newTodolist, ...todolists])\r\n        setTasks({...tasks, [newTodolistId]: []})\r\n    }\r\n\r\n    function addTask(newTitle: string, todolistId: string) {\r\n        let task = {id: v1(), title: newTitle, isDone: false}\r\n        let todolistTask = tasks[todolistId]\r\n        tasks[todolistId] = [task, ...todolistTask]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function removeTask(id: string, todolistId: string) {\r\n        let todolistTask = tasks[todolistId]\r\n        tasks[todolistId] = todolistTask.filter(t => t.id !== id)\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function removeTodolist(id: string) {\r\n        setTodolists(todolists.filter(t => t.id !== id))\r\n        delete tasks[id]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function changeStatus(id: string, isDone: boolean, todolistId: string) {\r\n        let todolistTask = tasks[todolistId]\r\n        let task = todolistTask.find(t => t.id === id)\r\n        if (task) {\r\n            task.isDone = isDone\r\n            setTasks({...tasks})\r\n        }\r\n\r\n    }\r\n\r\n\r\n    function changeFilter(value: FilterType, todolistId: string) {\r\n        let todolist = todolists.find(t => t.id === todolistId)\r\n        if (todolist) {\r\n            todolist.filter = value\r\n            setTodolists([...todolists])\r\n        }\r\n    }\r\n\r\n    function onChange(id: string, todolistId: string, newValue: string) {\r\n        let todolistTask = tasks[todolistId]\r\n        let task = todolistTask.find(t => t.id === id)\r\n        if (task) {\r\n            task.title = newValue\r\n            setTasks({...tasks})\r\n        }\r\n\r\n    }\r\n\r\n    function onChangeTodolistTitle(todolistId: string, newValue: string) {\r\n        let todolist = todolists.find(t => t.id === todolistId)\r\n        if (todolist) {\r\n            todolist.title = newValue\r\n            setTodolists([...todolists])\r\n        }\r\n    }\r\n\r\n\r\n    let todolistId1 = v1();\r\n    let todolistId2 = v1();\r\n    let [todolists, setTodolists] = useState<Array<TodolistType>>([\r\n        {\r\n            id: todolistId1,\r\n            title: \"What to learn\",\r\n            filter: 'all'\r\n        },\r\n        {\r\n            id: todolistId2,\r\n            title: \"What to bye\",\r\n            filter: 'all'\r\n        }\r\n    ])\r\n    let [tasks, setTasks] = useState<TaskStateType>({\r\n        [todolistId1]: [\r\n            {id: v1(), title: 'HTML&CSS', isDone: true},\r\n            {id: v1(), title: 'JS', isDone: true},\r\n            {id: v1(), title: 'ReactJS', isDone: false},\r\n            {id: v1(), title: 'Rest API', isDone: false},\r\n            {id: v1(), title: 'Graph QL', isDone: false}\r\n        ],\r\n        [todolistId2]: [\r\n            {id: v1(), title: 'Milk', isDone: true},\r\n            {id: v1(), title: 'React Book', isDone: true}\r\n        ]\r\n    })\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar variant=\"dense\">\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" color=\"inherit\" component=\"div\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color='inherit'>Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px'}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n\r\n                        todolists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl.id]\r\n                            let tasksForToDoList = allTodolistTasks\r\n                            if (tl.filter === 'active') {\r\n                                tasksForToDoList = allTodolistTasks.filter(t => !t.isDone)\r\n\r\n                            }\r\n                            if (tl.filter === 'completed') {\r\n                                tasksForToDoList = allTodolistTasks.filter(t => t.isDone)\r\n\r\n\r\n                            }\r\n                            return <Grid item>\r\n                                <Paper style={{padding: '10px'}}>\r\n                                    <Todolist\r\n                                        key={tl.id}\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={tasksForToDoList}\r\n                                        removeTask={removeTask}\r\n                                        removeTodolist={removeTodolist}\r\n                                        filterTasks={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        onChange={onChange}\r\n                                        onChangeTodolistTitle={onChangeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}