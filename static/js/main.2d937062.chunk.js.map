{"version":3,"sources":["Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Todolist","props","useState","title","setTitle","error","setError","addTask","trim","id","className","onClick","removeTodolist","value","onChange","e","currentTarget","onKeyPress","charCode","tasks","map","t","key","isDone","type","newIsDoneValue","checked","changeTaskStatus","removeTask","filterTasks","filter","App","newTitle","todolistId","task","v1","todolistTask","setTasks","setTodolists","todolists","changeStatus","find","changeFilter","todolist","todolistId1","todolistId2","tl","allTodolistTasks","tasksForToDoList","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.2d937062.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {TasksType, FilterType} from './App';\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TasksType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    filterTasks: (value: FilterType, todolistId: string) => void\r\n    addTask: (newTitle: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    filter: FilterType\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n    const addTask = () => {\r\n        if (title.trim() !== '') {\r\n            props.addTask(title, props.id)\r\n            setTitle('')\r\n        } else {\r\n            setError('Title is required!');\r\n        }\r\n\r\n    }\r\n    const onChaneHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.charCode === 13) {\r\n            addTask();\r\n        }\r\n    }\r\n    const onAllClickHandler = () => {\r\n        props.filterTasks('all', props.id)\r\n    }\r\n    const onActiveClickHandler = () => {\r\n        props.filterTasks('active', props.id)\r\n    }\r\n    const onCompletedClickHandler = () => {\r\n        props.filterTasks('completed', props.id)\r\n    }\r\n    const removeTodolistHandler = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n\r\n    return (\r\n        <div className='Block'>\r\n\r\n            <h3>{props.title}\r\n                <button onClick={removeTodolistHandler}>X</button>\r\n            </h3>\r\n\r\n            <div>\r\n                <input value={title}\r\n                       onChange={onChaneHandler}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       className={error ? 'error' : ''}\r\n                />\r\n                <button onClick={addTask}>+</button>\r\n                {error && <div className=\"error-message\">{error}</div>}\r\n            </div>\r\n            <ul>\r\n                {\r\n                    props.tasks.map(t => {\r\n                            const onClickHandler = () => {\r\n                                props.removeTask(t.id, props.id)\r\n                            }\r\n                            const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                                let newIsDoneValue = e.currentTarget.checked;\r\n                                props.changeTaskStatus(t.id, newIsDoneValue, props.id);\r\n                            }\r\n                            return <li key={t.id} className={t.isDone ? 'is-done' : ''}>\r\n                                <input type=\"checkbox\" onChange={onChangeHandler} checked={t.isDone}/>\r\n                                <span>{t.title}</span>\r\n                                <button onClick={onClickHandler}>X\r\n                                </button>\r\n                            </li>\r\n                        }\r\n                    )\r\n                }\r\n            </ul>\r\n            <div>\r\n                <button onClick={onAllClickHandler}\r\n                        className={props.filter === 'all' ? 'active-filter' : ''}\r\n                >All\r\n                </button>\r\n                <button onClick={onActiveClickHandler}\r\n                        className={props.filter === 'active' ? 'active-filter' : ''}>Active\r\n                </button>\r\n                <button onClick={onCompletedClickHandler}\r\n                        className={props.filter === 'completed' ? 'active-filter' : ''}>Completed\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\n\r\nexport type FilterType = 'all' | 'completed' | 'active'\r\n\r\nexport type TasksType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nexport type TodolistType = Array<{\r\n    id: string\r\n    title: string\r\n    filter: FilterType\r\n}>\r\ntype TaskStateType = {[key: string]: Array<TasksType>}\r\n\r\nfunction App() {\r\n\r\n    function addTask(newTitle: string, todolistId: string) {\r\n        let task = {id: v1(), title: newTitle, isDone: false}\r\n        let todolistTask = tasks[todolistId]\r\n        tasks[todolistId] = [task, ...todolistTask]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function removeTask(id: string, todolistId: string) {\r\n        let todolistTask = tasks[todolistId]\r\n        tasks[todolistId] = todolistTask.filter(t => t.id !== id)\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function removeTodolist(id: string) {\r\n        setTodolists(todolists.filter(t => t.id !== id))\r\n        delete tasks[id]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function changeStatus(id: string, isDone: boolean, todolistId: string) {\r\n        let todolistTask = tasks[todolistId]\r\n        let task = todolistTask.find(t => t.id === id)\r\n        if (task) {\r\n            task.isDone = isDone\r\n            setTasks({...tasks})\r\n        }\r\n\r\n    }\r\n\r\n\r\n    function changeFilter(value: FilterType, todolistId: string) {\r\n        let todolist = todolists.find(t => t.id === todolistId)\r\n        if (todolist) {\r\n            todolist.filter = value\r\n            setTodolists([...todolists])\r\n        }\r\n    }\r\n\r\n\r\n    let todolistId1 = v1();\r\n    let todolistId2 = v1();\r\n    let [todolists, setTodolists] = useState<TodolistType>([\r\n        {\r\n            id: todolistId1,\r\n            title: \"What to learn\",\r\n            filter: 'all'\r\n        },\r\n        {\r\n            id: todolistId2,\r\n            title: \"What to bye\",\r\n            filter: 'all'\r\n        }\r\n    ])\r\n    let [tasks, setTasks] = useState<TaskStateType>({\r\n        [todolistId1]: [\r\n            {id: v1(), title: 'HTML&CSS', isDone: true},\r\n            {id: v1(), title: 'JS', isDone: true},\r\n            {id: v1(), title: 'ReactJS', isDone: false},\r\n            {id: v1(), title: 'Rest API', isDone: false},\r\n            {id: v1(), title: 'Graph QL', isDone: false}\r\n        ],\r\n        [todolistId2]: [\r\n            {id: v1(), title: 'Milk', isDone: true},\r\n            {id: v1(), title: 'React Book', isDone: true}\r\n        ]\r\n    })\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {\r\n\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n                    let tasksForToDoList = allTodolistTasks\r\n                    if (tl.filter === 'active') {\r\n                        tasksForToDoList = allTodolistTasks.filter(t => !t.isDone)\r\n\r\n                    }\r\n                    if (tl.filter === 'completed') {\r\n                        tasksForToDoList = allTodolistTasks.filter(t => t.isDone)\r\n\r\n\r\n                    }\r\n                    return <Todolist\r\n                        key={tl.id}\r\n                        id={tl.id}\r\n                        title={tl.title}\r\n                        tasks={tasksForToDoList}\r\n                        removeTask={removeTask}\r\n                        removeTodolist={removeTodolist}\r\n                        filterTasks={changeFilter}\r\n                        addTask={addTask}\r\n                        changeTaskStatus={changeStatus}\r\n                        filter={tl.filter}\r\n                    />\r\n\r\n                })\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}