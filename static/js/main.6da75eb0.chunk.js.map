{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addItem","trim","value","onChange","e","currentTarget","onKeyPress","charCode","className","onClick","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Todolist","newValue","onChangeTodolistTitle","id","removeTodolist","addTask","tasks","map","t","key","isDone","type","newIsDoneValue","checked","changeTaskStatus","removeTask","filterTasks","filter","App","newTitle","todolistId","task","v1","todolistTask","setTasks","setTodolists","todolists","changeStatus","find","changeFilter","todolist","todolistId1","todolistId2","newTodolistId","tl","allTodolistTasks","tasksForToDoList","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.6da75eb0.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormPropsType) {\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(\"\")\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title)\r\n            setTitle(\"\")\r\n        } else {\r\n            setError(\"Title is required\")\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.charCode === 13) {\r\n            addItem()\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <input value={title}\r\n               onChange={onChangeHandler}\r\n               onKeyPress={onKeyPressHandler}\r\n               className={error ? \"error\" : \"\"}\r\n        />\r\n        <button onClick={addItem}>+</button>\r\n        {error && <div className={\"error-message\"}>{error}</div>}\r\n    </div>\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n    let [title, setTitle] = useState<string>(props.value)\r\n    const activeEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.value)\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    return (editMode\r\n        ? <input value={title}\r\n                 autoFocus onBlur={activateViewMode}\r\n                 onChange={changeTitle}/>\r\n        : <span onDoubleClick={activeEditMode}>{props.value}</span>)\r\n}","import React, {ChangeEvent} from 'react';\r\nimport {TasksType, FilterType} from './App';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TasksType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    filterTasks: (value: FilterType, todolistId: string) => void\r\n    addTask: (newTitle: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    filter: FilterType\r\n    onChange: (id: string, todolistId: string, newValue: string) => void\r\n    onChangeTodolistTitle: (todolistId: string, newValue: string) => void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id)\r\n    }\r\n    const removeTodolistHandler = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n\r\n    const onAllClickHandler = () => {\r\n        props.filterTasks('all', props.id)\r\n    }\r\n    const onActiveClickHandler = () => {\r\n        props.filterTasks('active', props.id)\r\n    }\r\n    const onCompletedClickHandler = () => {\r\n        props.filterTasks('completed', props.id)\r\n    }\r\n    const onChangeTodolistTitle = (newValue: string) => {\r\n        props.onChangeTodolistTitle(props.id, newValue)\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div className='Block'>\r\n\r\n            <h3>\r\n                <EditableSpan value={props.title} onChange={onChangeTodolistTitle}/>\r\n                <button onClick={removeTodolistHandler}>X</button>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <ul>\r\n                {\r\n                    props.tasks.map(t => {\r\n                            const onClickHandler = () => {\r\n                                props.removeTask(t.id, props.id)\r\n                            }\r\n                            const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                                let newIsDoneValue = e.currentTarget.checked;\r\n                                props.changeTaskStatus(t.id, newIsDoneValue, props.id);\r\n                            }\r\n                            const onChange = (newValue: string) => {\r\n                                props.onChange(t.id, props.id, newValue)\r\n                            }\r\n                            return <li key={t.id} className={t.isDone ? 'is-done' : ''}>\r\n                                <input type=\"checkbox\" onChange={onChangeHandler} checked={t.isDone}/>\r\n                                <EditableSpan value={t.title}\r\n                                              onChange={onChange}\r\n                                />\r\n                                <button onClick={onClickHandler}>X\r\n                                </button>\r\n                            </li>\r\n                        }\r\n                    )\r\n                }\r\n            </ul>\r\n            <div>\r\n                <button onClick={onAllClickHandler}\r\n                        className={props.filter === 'all' ? 'active-filter' : ''}\r\n                >All\r\n                </button>\r\n                <button onClick={onActiveClickHandler}\r\n                        className={props.filter === 'active' ? 'active-filter' : ''}>Active\r\n                </button>\r\n                <button onClick={onCompletedClickHandler}\r\n                        className={props.filter === 'completed' ? 'active-filter' : ''}>Completed\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\n\r\nexport type FilterType = 'all' | 'completed' | 'active'\r\n\r\nexport type TasksType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterType\r\n}\r\ntype TaskStateType = { [key: string]: Array<TasksType> }\r\n\r\nfunction App() {\r\n\r\n    function addTodolist(title: string) {\r\n        let newTodolistId = v1()\r\n        let newTodolist: TodolistType = {\r\n            id: newTodolistId,\r\n            title: title,\r\n            filter: 'all'\r\n        }\r\n        setTodolists([newTodolist, ...todolists])\r\n        setTasks({...tasks, [newTodolistId]: []})\r\n    }\r\n\r\n    function addTask(newTitle: string, todolistId: string) {\r\n        let task = {id: v1(), title: newTitle, isDone: false}\r\n        let todolistTask = tasks[todolistId]\r\n        tasks[todolistId] = [task, ...todolistTask]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function removeTask(id: string, todolistId: string) {\r\n        let todolistTask = tasks[todolistId]\r\n        tasks[todolistId] = todolistTask.filter(t => t.id !== id)\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function removeTodolist(id: string) {\r\n        setTodolists(todolists.filter(t => t.id !== id))\r\n        delete tasks[id]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function changeStatus(id: string, isDone: boolean, todolistId: string) {\r\n        let todolistTask = tasks[todolistId]\r\n        let task = todolistTask.find(t => t.id === id)\r\n        if (task) {\r\n            task.isDone = isDone\r\n            setTasks({...tasks})\r\n        }\r\n\r\n    }\r\n\r\n\r\n    function changeFilter(value: FilterType, todolistId: string) {\r\n        let todolist = todolists.find(t => t.id === todolistId)\r\n        if (todolist) {\r\n            todolist.filter = value\r\n            setTodolists([...todolists])\r\n        }\r\n    }\r\n\r\n    function onChange(id: string, todolistId: string, newValue: string) {\r\n        let todolistTask = tasks[todolistId]\r\n        let task = todolistTask.find(t => t.id === id)\r\n        if (task) {\r\n            task.title = newValue\r\n            setTasks({...tasks})\r\n        }\r\n\r\n    }\r\n\r\n    function onChangeTodolistTitle(todolistId: string, newValue: string) {\r\n        let todolist = todolists.find(t => t.id === todolistId)\r\n        if (todolist) {\r\n            todolist.title = newValue\r\n            setTodolists([...todolists])\r\n        }\r\n    }\r\n\r\n\r\n    let todolistId1 = v1();\r\n    let todolistId2 = v1();\r\n    let [todolists, setTodolists] = useState<Array<TodolistType>>([\r\n        {\r\n            id: todolistId1,\r\n            title: \"What to learn\",\r\n            filter: 'all'\r\n        },\r\n        {\r\n            id: todolistId2,\r\n            title: \"What to bye\",\r\n            filter: 'all'\r\n        }\r\n    ])\r\n    let [tasks, setTasks] = useState<TaskStateType>({\r\n        [todolistId1]: [\r\n            {id: v1(), title: 'HTML&CSS', isDone: true},\r\n            {id: v1(), title: 'JS', isDone: true},\r\n            {id: v1(), title: 'ReactJS', isDone: false},\r\n            {id: v1(), title: 'Rest API', isDone: false},\r\n            {id: v1(), title: 'Graph QL', isDone: false}\r\n        ],\r\n        [todolistId2]: [\r\n            {id: v1(), title: 'Milk', isDone: true},\r\n            {id: v1(), title: 'React Book', isDone: true}\r\n        ]\r\n    })\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AddItemForm addItem={addTodolist}/>\r\n            {\r\n\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n                    let tasksForToDoList = allTodolistTasks\r\n                    if (tl.filter === 'active') {\r\n                        tasksForToDoList = allTodolistTasks.filter(t => !t.isDone)\r\n\r\n                    }\r\n                    if (tl.filter === 'completed') {\r\n                        tasksForToDoList = allTodolistTasks.filter(t => t.isDone)\r\n\r\n\r\n                    }\r\n                    return <Todolist\r\n                        key={tl.id}\r\n                        id={tl.id}\r\n                        title={tl.title}\r\n                        tasks={tasksForToDoList}\r\n                        removeTask={removeTask}\r\n                        removeTodolist={removeTodolist}\r\n                        filterTasks={changeFilter}\r\n                        addTask={addTask}\r\n                        changeTaskStatus={changeStatus}\r\n                        filter={tl.filter}\r\n                        onChange={onChange}\r\n                        onChangeTodolistTitle={onChangeTodolistTitle}\r\n                    />\r\n\r\n                })\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}