{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","utils/error-utils.ts","features/login/auth-reducer.ts","app/app-reducer.ts","features/todolistsList/todolist/todolists-reducer.ts","features/todolistsList/todolist/task/tasks-reducer.ts","app/store.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/todolistsList/todolist/task/Task.tsx","features/todolistsList/todolist/Todolist.tsx","features/todolistsList/TodolistsList.tsx","components/ErrorSnackBar/ErrorSnackBar.tsx","features/login/Login.tsx","app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TodoTaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsApi","get","title","post","todolistId","delete","put","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkAppError","message","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","authReducer","reducer","actions","isInitialized","setIsInitializedAC","appReducer","clearDataAC","removeTodolistAC","index","findIndex","i","id","splice","addTodolistAC","unshift","todolist","filter","entityStatus","changeTodolistTitleAC","changeTodolistFilterAC","setTodoListsAC","todoLists","map","changeTodolistEntityStatusAC","todolistsReducer","removeTaskAC","tasks","taskID","addTaskAC","task","todoListId","updateTaskAC","setTasksAC","extraReducers","builder","addCase","forEach","tasksReducer","fetchTaskTC","then","res","items","catch","updateTaskTC","domainModel","getState","find","tl","apiModel","description","priority","startDate","deadline","resultCode","rootReducer","combineReducers","app","auth","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","useAppSelector","useSelector","AddItemForm","React","memo","addItem","disabled","console","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","disable","entityTaskStatus","onTitleChangeHandler","useCallback","newValue","onChangeTaskTitle","TodolistId","className","Completed","Checkbox","checked","newIsDoneValue","New","changeTaskStatus","removeTask","Delete","Todolist","demo","addTask","onAllClickHandler","filterTasks","onActiveClickHandler","onCompletedClickHandler","onChangeTodolistTitle","tasksForTodolist","t","removeTodolist","style","paddingTop","Button","TodolistsList","todolists","useDispatch","useEffect","todos","addTodolist","item","addTodolistTC","newTitle","addTaskTC","removeTaskTC","changeStatus","changeFilter","changeTaskTitle","Grid","container","padding","spacing","tasksForToDoList","Paper","to","Alert","ref","elevation","ErrorSnackbar","handleClose","event","reason","Stack","sx","width","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justifyContent","FormControl","FormLabel","href","target","handleSubmit","FormGroup","margin","getFieldProps","touched","type","FormControlLabel","control","App","finally","isLoggedOutHandler","position","top","textAlign","CircularProgress","AppBar","Toolbar","edge","Menu","Typography","component","LinearProgress","Container","fixed","path","element","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.daba09be.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios, {AxiosResponse} from \"axios\";\r\nimport {RequestStatusType} from \"../app/app-reducer\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"4bd60911-e7ab-47b0-851f-962a07b6cbc2\"\r\n    }\r\n})\r\n\r\n//api\r\nexport const todolistsApi = {\r\n    getTodoLists() {\r\n        return instance.get<TodolistType[]>('todo-lists')\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title})\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${todolistId}`, {title: title})\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponseType>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title: title})\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    }\r\n}\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{ userId: number }>>>(`auth/login`,\r\n            data)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<MeResponseType>>(`auth/me`)\r\n    },\r\n    logout () {\r\n        return instance.delete<ResponseType>(`auth/login`)\r\n    }\r\n\r\n}\r\n\r\n//types\r\nexport enum TaskStatuses {\r\n    New,\r\n    InProgress,\r\n    Completed,\r\n    Draft\r\n}\r\nexport enum TodoTaskPriorities {\r\n    Low,\r\n    Middle,\r\n    Hi,\r\n    Urgently,\r\n    Later\r\n}\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TodoTaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n    entityTaskStatus: RequestStatusType\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: [string]\r\n    data: D\r\n}\r\ntype GetTasksResponseType = {\r\n    error: null | string\r\n    items: TaskType[]\r\n    totalCount: number\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TodoTaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\ntype MeResponseType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n","import {Dispatch} from \"redux\";\r\nimport {setAppErrorAC, setAppStatusAC} from \"../app/app-reducer\";\r\nimport {ResponseType} from \"../api/todolists-api\";\r\n\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch) => {\r\n    data.messages.length ? dispatch(setAppErrorAC({error: data.messages[0]})) :\r\n        dispatch(setAppErrorAC({error: 'Some error occurred!'}));\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkAppError = (message: string, dispatch: Dispatch) => {\r\n    dispatch(setAppErrorAC({error: message ? message : 'Some error occurred?'}))\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {setAppStatusAC} from '../../app/app-reducer'\r\nimport {authAPI, LoginParamsType} from \"../../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkAppError} from \"../../utils/error-utils\";\r\nimport {AxiosError} from \"axios\";\r\nimport {clearDataAC} from \"../todolistsList/todolist/todolists-reducer\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: \"auth\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{value: boolean}>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nexport const {setIsLoggedInAC} = slice.actions\r\n\r\n// actions\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: true}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkAppError(error.message, dispatch)\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: false}))\r\n                dispatch(clearDataAC())\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkAppError(error.message, dispatch)\r\n        })\r\n}\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/todolists-api\";\r\nimport {setIsLoggedInAC} from \"../features/login/auth-reducer\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n//state\r\nconst initialState: InitialStateType = {\r\n    status: \"loading\",\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: \"app\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppStatusAC(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppErrorAC(state, action: PayloadAction<{ error: null | string }>) {\r\n            state.error = action.payload.error\r\n        },\r\n        setIsInitializedAC(state, action: PayloadAction<{ isInitialized: boolean }>) {\r\n            state.isInitialized = action.payload.isInitialized\r\n        }\r\n\r\n    }\r\n})\r\n//reducer\r\nexport const appReducer = slice.reducer\r\n\r\n\r\n//actions\r\nexport const {setAppStatusAC, setAppErrorAC, setIsInitializedAC} = slice.actions\r\n\r\n//thunk\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: true}));\r\n            } else {\r\n            }\r\n        })\r\n        .finally(() => {\r\n            dispatch(setIsInitializedAC({isInitialized: true}))\r\n        })\r\n}\r\n\r\n//types\r\nexport type InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n","import {todolistsApi, TodolistType} from \"../../../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {\r\n    RequestStatusType,\r\n    setAppStatusAC\r\n} from \"../../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkAppError} from \"../../../utils/error-utils\";\r\nimport {AxiosError} from \"axios\";\r\nimport {fetchTaskTC} from \"./task/tasks-reducer\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nconst slice = createSlice({\r\n    name: \"todolists\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        clearDataAC(state) {\r\n            state = []\r\n        },\r\n        removeTodolistAC(state, action: PayloadAction<{ todolistId: string }>) {\r\n            const index = state.findIndex(i => i.id === action.payload.todolistId)\r\n            index > -1 && state.splice(index, 1)\r\n        },\r\n        addTodolistAC(state, action: PayloadAction<{ todolist: TodolistType }>) {\r\n            state.unshift({...action.payload.todolist, filter: \"all\", entityStatus: \"idle\"})\r\n        },\r\n        changeTodolistTitleAC(state, action: PayloadAction<{ id: string, title: string }>) {\r\n            const index = state.findIndex(i => i.id === action.payload.id)\r\n            state[index].title = action.payload.title\r\n        },\r\n        changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const index = state.findIndex(i => i.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        setTodoListsAC(state, action: PayloadAction<{ todoLists: Array<TodolistType> }>) {\r\n            return action.payload.todoLists.map(i => ({...i, filter: \"all\", entityStatus: \"idle\"}))\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            const index = state.findIndex(i => i.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.status\r\n        },\r\n    }\r\n})\r\n\r\n//reducer\r\nexport const todolistsReducer = slice.reducer\r\n//     (state: Array<TodolistDomainType> = initialState, action: ActionsType)\r\n//     : Array<TodolistDomainType> => {\r\n//     switch (action.type) {\r\n//         case \"SET-TODOLISTS\":\r\n//             return action.todoLists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n//         case 'REMOVE-TODOLIST':\r\n//             return state.filter(tl => tl.id !== action.todolistId)\r\n//         case 'ADD-TODOLIST':\r\n//             return [{...action.todolist, filter: \"all\", entityStatus: 'idle'}, ...state]\r\n//         case 'CHANGE-TODOLIST-TITLE':\r\n//             return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n//         case 'CHANGE-TODOLIST-FILTER':\r\n//             return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n//         case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n//             return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n//         case 'CLEAR-DATA':\r\n//             return []\r\n//         default:\r\n//             return state\r\n//     }\r\n// }\r\n\r\n//actions\r\n\r\nexport const {\r\n    clearDataAC,\r\n    removeTodolistAC,\r\n    addTodolistAC,\r\n    changeTodolistTitleAC,\r\n    changeTodolistFilterAC,\r\n    setTodoListsAC,\r\n    changeTodolistEntityStatusAC\r\n} = slice.actions\r\n// export const clearDataAC = () => ({type: \"CLEAR-DATA\"} as const)\r\n// export const removeTodolistAC = (todolistId: string) =>\r\n//     ({type: 'REMOVE-TODOLIST', todolistId}) as const\r\n// export const addTodolistAC = (todolist: TodolistType) =>\r\n//     ({type: 'ADD-TODOLIST', todolist}) as const\r\n// export const changeTodolistTitleAC = (id: string, title: string) =>\r\n//     ({type: 'CHANGE-TODOLIST-TITLE', id, title}) as const\r\n// export const changeTodolistFilterAC = (id: string, filter: FilterValuesType) =>\r\n//     ({type: 'CHANGE-TODOLIST-FILTER', id, filter}) as const\r\n// export const setTodoListsAC = (todoLists: Array<TodolistType>) =>\r\n//     ({type: 'SET-TODOLISTS', todoLists}) as const\r\n// export const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n//     type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status\r\n// } as const)\r\n\r\n\r\n//thunks\r\nexport const fetchTodoListsTC = () => (dispatch: any) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsApi.getTodoLists()\r\n        .then((res) => {\r\n            dispatch(setTodoListsAC({todoLists: res.data}))\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return res.data\r\n        })\r\n        .then((todos) => {\r\n            todos.forEach(tl => {\r\n                dispatch(fetchTaskTC(tl.id))\r\n            })\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkAppError(error.message, dispatch)\r\n        })\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}))\r\n    todolistsApi.deleteTodolist(todolistId)\r\n        .then(() => {\r\n            dispatch(removeTodolistAC({todolistId: todolistId}))\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkAppError(error.message, dispatch)\r\n        })\r\n}\r\nexport const addTodolistTC = (title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsApi.createTodolist(title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTodolistAC({todolist: res.data.data.item}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkAppError(error.message, dispatch)\r\n        })\r\n}\r\nexport const updateTodolistTitleTC = (todoListId: string, title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsApi.updateTodolist(todoListId, title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(changeTodolistTitleAC({id: todoListId, title}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkAppError(error.message, dispatch)\r\n        })\r\n}\r\n\r\n//types\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\nexport type FilterValuesType = 'all' | 'completed' | 'active'\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>\r\nexport type SetTodoListsActionType = ReturnType<typeof setTodoListsAC>\r\n\r\n\r\n","import {TaskStateType} from \"../../../../trash/App\";\r\nimport {\r\n    addTodolistAC,\r\n    clearDataAC,\r\n    setTodoListsAC,\r\n} from \"../todolists-reducer\";\r\nimport {\r\n    TaskStatuses,\r\n    TaskType,\r\n    todolistsApi,\r\n    TodoTaskPriorities,\r\n    UpdateTaskModelType\r\n} from \"../../../../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"../../../../app/store\";\r\nimport {\r\n    RequestStatusType,\r\n    setAppStatusAC\r\n} from \"../../../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkAppError} from \"../../../../utils/error-utils\";\r\nimport {AxiosError} from \"axios\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: TaskStateType = {}\r\nconst slice = createSlice({\r\n    name: \"tasks\",\r\n    initialState,\r\n    reducers: {\r\n        removeTaskAC(state, action: PayloadAction<{ taskID: string, todolistId: string }>) {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(i => i.id === action.payload.taskID)\r\n            if (index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n        },\r\n        addTaskAC(state, action: PayloadAction<{ task: TaskType }>) {\r\n            state[action.payload.task.todoListId].unshift(action.payload.task)\r\n        },\r\n        updateTaskAC(state, action: PayloadAction<{ taskID: string, model: UpdateDomainModelTaskType, todolistId: string }>) {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(i => i.id === action.payload.taskID)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.model}\r\n            }\r\n        },\r\n        setTasksAC(state, action: PayloadAction<{ tasks: Array<TaskType>, todolistId: string }>) {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolistAC, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        })\r\n        builder.addCase(setTodoListsAC, (state, action) => {\r\n            action.payload.todoLists.forEach(i => {\r\n                state[i.id] = []\r\n            })\r\n        })\r\n        builder.addCase(removeTaskAC, (state, action) => {\r\n            delete state[action.payload.todolistId]\r\n        })\r\n        builder.addCase(clearDataAC, (state, action) => {\r\n            state = {}\r\n        })\r\n    }\r\n})\r\n\r\n//reducer\r\nexport const tasksReducer = slice.reducer\r\n\r\n//actions\r\nexport const {removeTaskAC, addTaskAC, setTasksAC, updateTaskAC} = slice.actions\r\n//thunks\r\nexport const fetchTaskTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsApi.getTasks(todolistId)\r\n        .then((res) => {\r\n            dispatch(setTasksAC({tasks: res.data.items, todolistId}))\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkAppError(error.message, dispatch)\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, model: UpdateDomainModelTaskType, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    dispatch(updateTaskAC({taskID: taskId, model, todolistId}))\r\n    todolistsApi.deleteTask(todolistId, taskId)\r\n        .then(() => {\r\n            dispatch(removeTaskAC({taskID: taskId, todolistId}))\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkAppError(error.message, dispatch)\r\n        })\r\n}\r\nexport const addTaskTC = (todolistId: string, title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsApi.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTaskAC({task: res.data.data.item}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkAppError(error.message, dispatch)\r\n        })\r\n\r\n}\r\nexport const updateTaskTC = (taskId: string, todolistId: string, domainModel: UpdateDomainModelTaskType) =>\r\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const allTasksFormState = getState().tasks\r\n        const tasksForCurrentTodolist = allTasksFormState[todolistId]\r\n        const task = tasksForCurrentTodolist.find(tl => {\r\n            return tl.id === taskId\r\n        })\r\n        if (task) {\r\n            const apiModel: UpdateTaskModelType = {\r\n                title: task.title,\r\n                description: task.description,\r\n                status: task.status,\r\n                priority: task.priority,\r\n                startDate: task.startDate,\r\n                deadline: task.deadline,\r\n                ...domainModel\r\n            }\r\n            dispatch(setAppStatusAC({status: 'loading'}))\r\n            todolistsApi.updateTask(todolistId, taskId, apiModel)\r\n                .then((res) => {\r\n                    if (res.data.resultCode === 0) {\r\n\r\n                        dispatch(updateTaskAC({taskID: taskId, model: apiModel, todolistId}))\r\n                        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                    } else {\r\n                        handleServerAppError(res.data, dispatch)\r\n                    }\r\n                })\r\n                .catch((error: AxiosError) => {\r\n                    handleServerNetworkAppError(error.message, dispatch)\r\n                })\r\n        }\r\n    }\r\n\r\n//types\r\ntype UpdateDomainModelTaskType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TodoTaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n    entityTaskStatus?: RequestStatusType\r\n}\r\n\r\n","import {tasksReducer} from '../features/todolistsList/todolist/task/tasks-reducer';\r\nimport {todolistsReducer} from '../features/todolistsList/todolist/todolists-reducer';\r\nimport {combineReducers} from 'redux';\r\nimport thunk from 'redux-thunk'\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {TypedUseSelectorHook, useSelector} from \"react-redux\";\r\nimport {authReducer} from \"../features/login/auth-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todoLists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\n//export const store = createStore(rootReducer, applyMiddleware(thunk));\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().prepend(thunk)\r\n})\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport const useAppSelector: TypedUseSelectorHook<AppRootStateType> = useSelector\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n//@ts-ignore\r\nwindow.store = store;\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {TextField} from \"@mui/material\";\r\nimport IconButton from \"@mui/material/IconButton/IconButton\";\r\n\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n\r\n    let [error, setError] = useState<string | null>(\"\")\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title)\r\n            setTitle(\"\")\r\n        } else {\r\n            setError(\"Title is required\")\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler()\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField\r\n            variant={'outlined'}\r\n            value={title}\r\n            onChange={onChangeHandler}\r\n            onKeyPress={onKeyPressHandler}\r\n            error={!!error}\r\n            label={'Title'}\r\n            helperText={error}\r\n            disabled={disabled}\r\n        />\r\n        <IconButton color='primary' onClick={addItemHandler} disabled={disabled}>+</IconButton>\r\n    </div>\r\n})","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@mui/material\";\r\n\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n    disabled: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n    console.log('EditableSpan called')\r\n\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n    let [title, setTitle] = useState<string>(props.value)\r\n\r\n    const activeEditMode = () => {\r\n        if (!props.disabled) {\r\n            setEditMode(true)\r\n            setTitle(props.value)\r\n        }\r\n    }\r\n\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n\r\n    }\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField\r\n            value={title}\r\n            autoFocus onBlur={activateViewMode}\r\n            onChange={changeTitle}\r\n        />\r\n        : <span onDoubleClick={activeEditMode}>{props.value}</span>\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport {TaskStatuses} from \"../../../../api/todolists-api\";\r\nimport IconButton from \"@mui/material/IconButton/IconButton\";\r\nimport {Checkbox} from \"@mui/material\";\r\nimport {Delete} from '@mui/icons-material';\r\nimport {RequestStatusType} from \"../../../../app/app-reducer\";\r\n\r\ntype TaskPropsType = {\r\n    title: string\r\n    status: TaskStatuses\r\n    taskId: string\r\n    TodolistId: string\r\n    removeTask: (taskId: string, newValue: RequestStatusType, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    onChangeTaskTitle: (id: string, todolistId: string, newValue: string) => void\r\n    entityStatus: RequestStatusType\r\n    entityTaskStatus: RequestStatusType\r\n}\r\n\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const disable = props.entityTaskStatus === 'loading' || props.entityStatus === 'loading'\r\n    const onClickHandler = () => {\r\n        props.removeTask(props.taskId, 'loading', props.TodolistId)\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New;\r\n        props.changeTaskStatus(props.taskId, newIsDoneValue, props.TodolistId);\r\n    }\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.onChangeTaskTitle(props.taskId, props.TodolistId, newValue)\r\n    }, [props.onChangeTaskTitle, props.taskId, props.TodolistId])\r\n\r\n    return <div key={props.taskId} className={props.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.status === TaskStatuses.Completed}\r\n            color={'primary'}\r\n            onChange={onChangeHandler}\r\n            disabled={disable}\r\n        />\r\n        <EditableSpan value={props.title}\r\n                      onChange={onTitleChangeHandler}\r\n                      disabled={disable}\r\n        />\r\n        <IconButton onClick={onClickHandler} disabled={disable}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n\r\n})\r\n","import React, {useCallback} from 'react';\r\nimport {AddItemForm} from \"../../../components/AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\r\nimport {Task} from \"./task/Task\";\r\nimport {FilterValuesType, TodolistDomainType} from \"./todolists-reducer\";\r\nimport {TaskStatuses} from \"../../../api/todolists-api\";\r\nimport {TaskType} from \"../../../api/todolists-api\";\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton/IconButton';\r\nimport {Delete} from \"@mui/icons-material\";\r\nimport {RequestStatusType} from \"../../../app/app-reducer\";\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, newValue: RequestStatusType, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    filterTasks: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (newTitle: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    onChangeTaskTitle: (id: string, todolistId: string, newValue: string) => void\r\n    onChangeTodolistTitle: (todolistId: string, newValue: string) => void\r\n    demo?: boolean\r\n}\r\n\r\n\r\nexport const Todolist = React.memo(({demo = false, ...props}: PropsType) => {\r\n    console.log(\"Todolist called\")\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolistHandler = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n\r\n    const onAllClickHandler = useCallback(() => {\r\n        props.filterTasks('all', props.todolist.id)\r\n    }, [props.filterTasks, props.todolist.id])\r\n    const onActiveClickHandler = useCallback(() => {\r\n        props.filterTasks('active', props.todolist.id)\r\n    }, [props.filterTasks, props.todolist.id])\r\n    const onCompletedClickHandler = useCallback(() => {\r\n        props.filterTasks('completed', props.todolist.id)\r\n    }, [props.filterTasks, props.todolist.id])\r\n    const onChangeTodolistTitle = useCallback((newValue: string) => {\r\n        props.onChangeTodolistTitle(props.todolist.id, newValue)\r\n    }, [props.onChangeTodolistTitle, props.todolist.id])\r\n\r\n    let tasksForTodolist = props.tasks\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n    return (\r\n        <div className='Block'>\r\n\r\n            <h3>\r\n                <EditableSpan value={props.todolist.title} onChange={onChangeTodolistTitle}\r\n                              disabled={props.todolist.entityStatus === 'loading'}/>\r\n                <IconButton onClick={removeTodolistHandler} disabled={props.todolist.entityStatus === 'loading'}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n            <div>\r\n                {\r\n                    tasksForTodolist.map(t => {\r\n                            return <>\r\n                                <Task key={t.id}\r\n                                      taskId={t.id}\r\n                                      TodolistId={props.todolist.id}\r\n                                      status={t.status}\r\n                                      title={t.title}\r\n                                      removeTask={props.removeTask}\r\n                                      changeTaskStatus={props.changeTaskStatus}\r\n                                      onChangeTaskTitle={props.onChangeTaskTitle}\r\n                                      entityStatus={props.todolist.entityStatus}\r\n                                      entityTaskStatus={t.entityTaskStatus}\r\n                                />\r\n                            </>\r\n                        }\r\n                    )\r\n                }\r\n            </div>\r\n            <div style={{paddingTop: \"10px\"}}>\r\n                <Button variant={props.todolist.filter === 'all' ? 'contained' : 'text'} color={'inherit'}\r\n                        onClick={onAllClickHandler}>All\r\n                </Button>\r\n                <Button variant={props.todolist.filter === 'active' ? 'contained' : 'text'} color={'primary'}\r\n                        onClick={onActiveClickHandler}>Active\r\n                </Button>\r\n                <Button variant={props.todolist.filter === 'completed' ? 'contained' : 'text'} color={'secondary'}\r\n                        onClick={onCompletedClickHandler}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n","import {AppRootStateType, useAppSelector} from \"../../app/store\";\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    fetchTodoListsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType,\r\n    updateTodolistTitleTC\r\n} from \"./todolist/todolists-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport React, {useCallback, useEffect} from \"react\";\r\nimport {addTaskTC, removeTaskTC, updateTaskTC} from \"./todolist/task/tasks-reducer\";\r\nimport {TaskStatuses} from \"../../api/todolists-api\";\r\nimport {Grid, Paper} from \"@mui/material\";\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\nimport {Todolist} from \"./todolist/Todolist\";\r\nimport {TaskStateType} from \"../../app/App\";\r\nimport {RequestStatusType} from \"../../app/app-reducer\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\ntype TodolistsListPropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<TodolistsListPropsType> = ({demo = false}) => {\r\n    const todolists = useAppSelector<Array<TodolistDomainType>>(state => state.todoLists)\r\n    const tasks = useAppSelector<TaskStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        dispatch(fetchTodoListsTC())\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title))\r\n    }, [dispatch])\r\n    const addTask = useCallback((newTitle: string, todolistId: string) => {\r\n        dispatch(addTaskTC(todolistId, newTitle))\r\n    }, [dispatch])\r\n    const removeTask = useCallback((id: string, newValue: RequestStatusType, todolistId: string) => {\r\n        dispatch(removeTaskTC(id, {entityTaskStatus: newValue}, todolistId))\r\n    }, [dispatch])\r\n    const removeTodolist = useCallback((id: string) => {\r\n        dispatch(removeTodolistTC(id))\r\n    }, [dispatch])\r\n    const changeStatus = useCallback((id: string, status: TaskStatuses, todolistId: string) => {\r\n        dispatch(updateTaskTC(id, todolistId, {status}))\r\n    }, [dispatch])\r\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\r\n        const action = changeTodolistFilterAC({id: todolistId, filter: value})\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const changeTaskTitle = useCallback((id: string, todolistId: string, newValue: string) => {\r\n        dispatch(updateTaskTC(id, todolistId, {title: newValue}))\r\n    }, [dispatch])\r\n    const onChangeTodolistTitle = useCallback((todolistId: string, newValue: string) => {\r\n        dispatch(updateTodolistTitleTC(todolistId, newValue))\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to=\"login\"/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {todolists.map(tl => {\r\n                let tasksForToDoList = tasks[tl.id]\r\n\r\n                return <Grid item key={tl.id}>\r\n                    <Paper style={{padding: '10px'}}>\r\n                        <Todolist\r\n                            todolist={tl}\r\n                            key={tl.id}\r\n                            tasks={tasksForToDoList}\r\n                            removeTask={removeTask}\r\n                            removeTodolist={removeTodolist}\r\n                            filterTasks={changeFilter}\r\n                            addTask={addTask}\r\n                            changeTaskStatus={changeStatus}\r\n                            onChangeTaskTitle={changeTaskTitle}\r\n                            onChangeTodolistTitle={onChangeTodolistTitle}\r\n                            demo={demo}\r\n                        />\r\n                    </Paper>\r\n                </Grid>\r\n            })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import * as React from 'react';\r\nimport Stack from '@mui/material/Stack';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props,\r\n    ref,\r\n) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport function ErrorSnackbar() {\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC({error: null}))\r\n    };\r\n\r\n    return (\r\n        <Stack spacing={2} sx={{width: '100%'}}>\r\n            <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                    {error}\r\n                </Alert>\r\n            </Snackbar>\r\n        </Stack>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Navigate} from 'react-router-dom';\r\nimport {LoginParamsType} from \"../../api/todolists-api\";\r\n\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: Partial<Omit<LoginParamsType, 'captcha'>> = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 2) {\r\n                errors.password = 'Invalid password address';\r\n            }\r\n            return errors;\r\n\r\n\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={\"/\"}/>\r\n    }\r\n\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <FormControl>\r\n                <FormLabel>\r\n                    <p>To log in get registered\r\n                        <a href={'https://social-network.samuraijs.com/'}\r\n                           target={'_blank'}> here\r\n                        </a>\r\n                    </p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                </FormLabel>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormGroup>\r\n                        <TextField label=\"Email\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps(\"email\")}\r\n                        />\r\n                        {formik.touched.email\r\n                            && formik.errors.email && <div style={{color: \"red\"}}>{formik.errors.email}</div>}\r\n                        <TextField type=\"password\"\r\n                                   label=\"Password\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps(\"password\")}\r\n                        />\r\n                        {formik.touched.password\r\n                            && formik.errors.password && <div style={{color: \"red\"}}>{formik.errors.password}</div>}\r\n                        <FormControlLabel label={'Remember me'}\r\n                                          control={\r\n                                              <Checkbox\r\n                                                  {...formik.getFieldProps(\"rememberMe\")}\r\n                                              />}/>\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </form>\r\n            </FormControl>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {AppRootStateType} from './store';\r\nimport {TaskType} from '../api/todolists-api';\r\nimport {AppBar, LinearProgress, Menu, Toolbar, Typography, Container, CircularProgress} from \"@mui/material\";\r\nimport IconButton from \"@mui/material/IconButton/IconButton\";\r\nimport Button from \"@mui/material/Button\";\r\nimport {TodolistsList} from \"../features/todolistsList/TodolistsList\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackBar/ErrorSnackBar\";\r\nimport {initializeAppTC, RequestStatusType} from \"./app-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Routes, Route, Navigate} from 'react-router-dom';\r\nimport {Login} from \"../features/login/Login\";\r\nimport {logoutTC} from \"../features/login/auth-reducer\";\r\n\r\n\r\nexport type TaskStateType = { [key: string]: Array<TaskType> }\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport default App;\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [dispatch])\r\n\r\n    const isLoggedOutHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [dispatch])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return <div className=\"App\">\r\n        <ErrorSnackbar/>\r\n        <AppBar position=\"static\" color=\"primary\">\r\n            <Toolbar>\r\n                <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                    <Menu open={false}/>\r\n                </IconButton>\r\n                <Typography variant=\"h6\" color=\"inherit\" component=\"div\">\r\n                    To Do List\r\n                </Typography>\r\n                {isLoggedIn && <div><Button color='warning' onClick={isLoggedOutHandler} >log out</Button></div>}\r\n            </Toolbar>\r\n            {status === 'loading' && <LinearProgress color={'secondary'}/>}\r\n        </AppBar>\r\n        <Container fixed>\r\n            <Routes>\r\n                <Route path=\"/\" element={<TodolistsList demo={demo}/>}/>\r\n                <Route path=\"login\" element={<Login/>}/>\r\n                <Route path=\"*\" element={<Navigate to=\"/404\"/>}/>\r\n                <Route path=\"/404\" element={<h1>404: PAGE NOT FOUND</h1>}/>\r\n            </Routes>\r\n        </Container>\r\n    </div>\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from \"./app/App\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <BrowserRouter>\r\n            <App/>\r\n        </BrowserRouter>\r\n        </Provider>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}